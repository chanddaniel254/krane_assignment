package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"errors"
	"event_management/auth"
	"event_management/graph/model"
	service "event_management/graph/services"
	"fmt"
)

// CreateOrganizer is the resolver for the createOrganizer field.
func (r *mutationResolver) CreateOrganizer(ctx context.Context, input model.NewOrganizer) (*model.Organizer, error) {
	userToken := fmt.Sprint(ctx.Value("Token"))

	userId, err := auth.CheckLogin(userToken)
	if err != nil {
		return nil, err

	}

	passingCondition := true

	if input.Role == "admin" || input.Role == "contributor" {
		passingCondition = false
	}
	fmt.Println("user id: ", userId, userId)
	_, err = auth.IsAdmin(userId, input.EventID, passingCondition, false)
	if err != nil {
		return nil, err

	}

	data, err := service.CreateOrganizer(input.EventID, input.UserID, input.Role)
	if err != nil {
		return nil, err
	}

	return data, nil
}

// RemoveOrganizer is the resolver for the removeOrganizer field.
func (r *mutationResolver) RemoveOrganizer(ctx context.Context, input string) (string, error) {
	userToken := fmt.Sprint(ctx.Value("Token"))

	userId, err := auth.CheckLogin(userToken)
	if err != nil {
		return "", err

	}

	if userId == input {
		return "", errors.New("you cant remove yourself")
	}

	_, err = auth.IsAdmin((userId), input, false, true)
	if err != nil {
		return "", err

	}

	response, err := service.RemoveOrganizer(input)
	if err != nil {
		return "", err
	}
	return response, nil
}

// GetOrganizersByEventID is the resolver for the getOrganizersByEventId field.
func (r *queryResolver) GetOrganizersByEventID(ctx context.Context, eventID string) ([]*model.Organizer, error) {
	userToken := fmt.Sprint(ctx.Value("Token"))
	userId, err := auth.CheckLogin(userToken)
	if err != nil {
		return nil, err

	}
	_, err = auth.IsAdmin(fmt.Sprint(userId), eventID, true, false)
	if err != nil {
		return nil, err

	}
	organizers, err := service.GetOrganizersByEventId(eventID)
	if err != nil {
		return nil, err

	}
	return organizers, nil
}
